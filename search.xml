<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[资源推荐]]></title>
      <url>/2017/10/29/amway/</url>
      <content type="html"><![CDATA[<p>Exciting works! Try to understand them, and will be amazed by their charms.</p>
<a id="more"></a>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1>]]></content>
      
        <categories>
            
            <category> -Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -amway </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Words]]></title>
      <url>/2017/10/29/Words/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>category n. 类别，种类，范畴</p>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -word </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 文件权限和目录配置]]></title>
      <url>/2017/10/29/LinuxFilePermissionAndConfiguration/</url>
      <content type="html"><![CDATA[<p>Linux一般将文件可以存取访问的身份分为三个类别．分别是 <code>owner</code>,<code>group</code>,<code>others</code>.且３中身份各自有<code>read</code>.<code>write</code>,<code>execute</code>,等权限．</p>
<p>在Linux中文件的权限管理非常重要。</p>
<a id="more"></a>
<h2 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h2><h3 id="1-文件所有者-owner"><a href="#1-文件所有者-owner" class="headerlink" title="1.文件所有者　owner"></a>1.文件所有者　owner</h3><p>Linux是个多用户，多任务的系统，经常会有很多人来使用这台主机来进行操作，为了保护每个人的隐私和每个人喜好的工作环境．就必须确立文件所有者的角色．如果某个文件被某个用户设置成只有文件所有者才能够查看和修改这个文件的内容，他人就无法对这个文件进行查看和修改．　</p>
<h3 id="2-用户组概念-group"><a href="#2-用户组概念-group" class="headerlink" title="2.用户组概念 group"></a>2.用户组概念 group</h3><p>配置文件所属的用户组，最有有用的功能就是，当进行团队开发资源的时候，每个组的成员之间互相对方的数据，而且其他组的成员不能够看到本组自己的文件内容．同时，每个帐号可以有多个用户组的支持，当然了在一个用户组里面也可以设置各自的权限，保留私人的空间．</p>
<h3 id="3-其他人的概念-Others"><a href="#3-其他人的概念-Others" class="headerlink" title="3.其他人的概念　Others"></a>3.其他人的概念　Others</h3><p>只有被拥有权限的用户授权才能够访问相应的文件．</p>
<h3 id="Liunx-用户身份和用户组记录的文件"><a href="#Liunx-用户身份和用户组记录的文件" class="headerlink" title="Liunx 用户身份和用户组记录的文件"></a>Liunx 用户身份和用户组记录的文件</h3><p>在Liunx系统中，默认情况下所有的系统帐号与一般身份用户，还有root的相关信息，都是记录在 /etc/passwd这个文件内，至于个人的密码则是记录在 etc/shadow文件下．Liunx所有的祖名都记录在 /etc/group 内，这个３个文件可以说是Linux中帐号密码和用户组信息的集中地，不要随便删除这三个文件．</p>
<h2 id="Linux-文件权限"><a href="#Linux-文件权限" class="headerlink" title="Linux 文件权限"></a>Linux 文件权限</h2><h3 id="Linux-文件属性．"><a href="#Linux-文件属性．" class="headerlink" title="Linux 文件属性．"></a>Linux 文件属性．</h3><p>要了解Linux的文件属性，一个常用的命令，</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls</div></pre></td></tr></table></figure>
<p>ls 是list 的意思，终点显示文件的文件名与相关属性.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al</div></pre></td></tr></table></figure>
<p><code>-al</code>表示列出所有的文件详细的权限和属性（包含隐藏文件，也就是文件名第一个字符为 <code>.</code>的文件．</p>
<p>以root运行上述的命令后，得到的输出类似．</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drwxr-xr-x  3 zero zero 4096 9月  29 18:24 下载</div></pre></td></tr></table></figure>
<p>这是关于下载文件的信息．　</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drwxr-xr-x[文件权限] 3[连接数]　zero[文件所有者]　zero[文件所属用户组] 4096[文件大小] 9月 29 18:24［文件最后被修改时间］　下载[文件名]</div></pre></td></tr></table></figure>
<h4 id="1-第一列表示了这个文件的类型和权限（permission）"><a href="#1-第一列表示了这个文件的类型和权限（permission）" class="headerlink" title="1.第一列表示了这个文件的类型和权限（permission）"></a>1.第一列表示了这个文件的类型和权限（permission）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drwxr-xr-x　　d[文件类型] rwx［文件所有者的权限］r-x[文件所属用户组的权限]　r-x [其他人对此文件的权限．]</div></pre></td></tr></table></figure>
<p>仔细看的话就会发现其中一共有10个字符．</p>
<p>第一个字符表示的是文件的类型．表示这个文件是目录，文件或者是链接文件等．</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>文件类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td>目录</td>
</tr>
<tr>
<td>-</td>
<td>文件</td>
</tr>
<tr>
<td>l</td>
<td>表示为连接文件[linkfile]</td>
</tr>
<tr>
<td>b</td>
<td>设备文件里面的可供存储的接口设备．</td>
</tr>
<tr>
<td>c</td>
<td>设备文件内的串行端口设备，例如鼠标，键盘，（一次性存储设备）</td>
</tr>
</tbody>
</table>
<p>接下来的字符，３个一组，分别表示文件所有者（owner）,文件所属用户组(group),其他非本组用户（Others)的权限．[r]表示的可读[read],［w］表示可写[write] ［x］表示可执行[execute].</p>
<p>注意到，rwx所在的位置是不会变的，有权限表示为相应的字符，没有权限用[-]表示．</p>
<blockquote>
<p>需要注意的是，目录和文件的权限意义并不相同，这是因此目录和文件记录的数据内容不同所致．</p>
</blockquote>
<h4 id="2-第二列表示有多少的文件名连接到此节点（i-node）．"><a href="#2-第二列表示有多少的文件名连接到此节点（i-node）．" class="headerlink" title="2.第二列表示有多少的文件名连接到此节点（i-node）．"></a>2.第二列表示有多少的文件名连接到此节点（i-node）．</h4><p>每个文件都会将自己的权限和属性记录到文件系统的 i-node 中，不过我们使用的目录树使用文件名来记录，</p>
<p>因此每个文件名会连接到一个 i-code ,这个属性记录就是有多少个文件名连接到同一个 i-node 号码．</p>
<h4 id="3-第三列表示这个文件或者目录的＂所有者帐号＂"><a href="#3-第三列表示这个文件或者目录的＂所有者帐号＂" class="headerlink" title="3.第三列表示这个文件或者目录的＂所有者帐号＂"></a>3.第三列表示这个文件或者目录的＂所有者帐号＂</h4><h4 id="4-第四列表示这个文件或者目录的＂所属用户组＂"><a href="#4-第四列表示这个文件或者目录的＂所属用户组＂" class="headerlink" title="4.第四列表示这个文件或者目录的＂所属用户组＂"></a>4.第四列表示这个文件或者目录的＂所属用户组＂</h4><h4 id="5-第五列表示这个文件的容量大小-默认单位为-“B”"><a href="#5-第五列表示这个文件的容量大小-默认单位为-“B”" class="headerlink" title="5.第五列表示这个文件的容量大小, 默认单位为　“B”"></a>5.第五列表示这个文件的容量大小, 默认单位为　“B”</h4><h4 id="6-第六列表示这个文件的创建日期或者是最近修改日期．"><a href="#6-第六列表示这个文件的创建日期或者是最近修改日期．" class="headerlink" title="6.第六列表示这个文件的创建日期或者是最近修改日期．"></a>6.第六列表示这个文件的创建日期或者是最近修改日期．</h4><h4 id="7-第七列表示文件名"><a href="#7-第七列表示文件名" class="headerlink" title="7.第七列表示文件名"></a>7.第七列表示文件名</h4><h2 id="Linux文件权限的重要性"><a href="#Linux文件权限的重要性" class="headerlink" title="Linux文件权限的重要性"></a>Linux文件权限的重要性</h2><p>Linux增加了各种文件的权限，最终的用途在于＂数据安全性＂上．</p>
<p>１．系统保护的功能．</p>
<p>２．团队开发或者数据共享的功能．</p>
<p>３．为将权限设置妥当的危害（文件被没有权限的人修改，损害）</p>
<h2 id="Linux文件属性和权限的修改"><a href="#Linux文件属性和权限的修改" class="headerlink" title="Linux文件属性和权限的修改"></a>Linux文件属性和权限的修改</h2><p>用于用户组，所有者，各种身份的权限的修改的命令：</p>
<blockquote>
<p>chgrp : (change group )改变文件所属的用户组</p>
<p>chown: (change owner)改变文件所有者．</p>
<p>chmod : (change model) 改变文件的权限</p>
</blockquote>
<h3 id="chgrp-改变文件所属的用户组"><a href="#chgrp-改变文件所属的用户组" class="headerlink" title="chgrp 改变文件所属的用户组"></a>chgrp 改变文件所属的用户组</h3><blockquote>
<p>注意的是　chgrp　该变的用户组必须是在 /etc/group 文件内存在．</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chgrp [-R]   组名  dirname/filename ...</div><div class="line">[-R]: 并行递归的持续更改，即连同目录下的所有文件目录一起修改．</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls　-l /home/zero/README.txt</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rw-rw-r-- 1 zero zero 629 10月 17 13:03 README.txt</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chgrp lijian /home/zero/README.txt</div></pre></td></tr></table></figure>
<p>查看文件属性：　</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls  -l README.txt</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rw-rw-r-- 1 zero lijian 629 10月 17 13:03 README.txt</div></pre></td></tr></table></figure>
<h2 id="chown-改变文件的所有者"><a href="#chown-改变文件的所有者" class="headerlink" title="chown 改变文件的所有者"></a>chown 改变文件的所有者</h2><blockquote>
<p>注意的是　chown　该变的用户组必须是在 /etc/group 文件内存在</p>
</blockquote>
<p>语法和范例：　</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown [-R] 帐号名称　文件或者目录</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls　-l /home/zero/README.txt</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rw-rw-r-- 1 zero lijian 629 10月 17 13:03 README.txt</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown lijian README.txt</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls  -l README.txt</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rw-rw-r-- 1 lijian lijian 629 10月 17 13:03 README.txt</div></pre></td></tr></table></figure>
<p>另一种语法和范例：同时修改用户组和所有者</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown [-R] 所有者名:用户组名 文件或者目录</div></pre></td></tr></table></figure>
<h3 id="修改文件权限的意义："><a href="#修改文件权限的意义：" class="headerlink" title="修改文件权限的意义："></a>修改文件权限的意义：</h3><p>最常见的需要修改所有者的例子就是复制文件给你之外的其他人时，使用最简单的<code>cp</code>命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp 源文件　目标文件</div></pre></td></tr></table></figure>
<p>假设要将 test 这个文件复制为 test_copy　文件名，并且要给　lijian　这个人，可以这样做． </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp test test_copy</div><div class="line">ls -al test*</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-rw-rw-r-- 1 zero zero 0 10月 24 23:08 test</div><div class="line">-rw-rw-r-- 1 zero zero 0 10月 24 23:08 test_copy</div></pre></td></tr></table></figure>
<p>cp命令会复制执行者的属性和权限，test_copy 还是归 zero:zero 所有</p>
<p>即使你将这个文件给了 lijian 这个用户，它也无法修改．</p>
<p>这个时候就要修改文件的所有者和用户组．</p>
<h3 id="改变权限-chmod"><a href="#改变权限-chmod" class="headerlink" title="改变权限　chmod"></a>改变权限　chmod</h3><p>权限的设置方法有两种，可以通过数字或者符号的方式进行修改．</p>
<h4 id="数字类型改变文件的权限："><a href="#数字类型改变文件的权限：" class="headerlink" title="数字类型改变文件的权限："></a>数字类型改变文件的权限：</h4><p>我们已经知道，文件的基本权限一共有９个，分别是　owner, group ,others,三种身份的 read write,execute权限．文件的权限字符为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rwxrwxrwx -[owner][group][others]</div></pre></td></tr></table></figure>
<p>每三个权限为一组．</p>
<p>各自的分数对照表如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r : 4        w: 2      r:1</div></pre></td></tr></table></figure>
<p>使用的时候，将每个身份的权限分数进行累加．例如：<code>-rwxr---rx</code>的权限：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">owner = 4+2+1 = 7</div><div class="line">group = 4 </div><div class="line">others = 2+1 =3</div></pre></td></tr></table></figure>
<p>所以当我们修改权限的时候，该权限的权限数字为 743 .</p>
<p>更改权限的<code>chmod</code>命令的格式是这样的：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod [-R] xyz 文件或目录</div></pre></td></tr></table></figure>
<p>-R : 递归迭代命令。使用该命令，目录及其子文件所有的权限都会备更改。</p>
<p>xyz: 文件的权限分数。</p>
<p>例如;将上文的文件的所有属性都启用：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chomd -R 777 fileName</div></pre></td></tr></table></figure>
<p>或者你不希望文件被人看到，可以设置成对除了自己外都不可见。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chomd 700 fileName</div></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的，root用户具有所有的权限，以上设置对root用户没有任何影响。</p>
</blockquote>
<h4 id="符号类型改变文件的权限"><a href="#符号类型改变文件的权限" class="headerlink" title="符号类型改变文件的权限"></a>符号类型改变文件的权限</h4><p>符号类型中，我们使用 <code>u g o</code>分别代表　owner , group ,others 三种用户身份．</p>
<p>｀a｀用来表示所有的身份（all）读写操作的权限可以表示为 <code>r  w  x</code></p>
<table>
<thead>
<tr>
<th>符号</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>u</td>
<td>owner</td>
</tr>
<tr>
<td>g</td>
<td>group</td>
</tr>
<tr>
<td>o</td>
<td>others</td>
</tr>
<tr>
<td>a</td>
<td>all [owner,group,others]</td>
</tr>
<tr>
<td>r</td>
<td>read</td>
</tr>
<tr>
<td>w</td>
<td>write</td>
</tr>
<tr>
<td>e</td>
<td>excute</td>
</tr>
<tr>
<td>+</td>
<td>添加权限</td>
</tr>
<tr>
<td>-</td>
<td>去掉权限</td>
</tr>
</tbody>
</table>
<blockquote>
<p>使用 <code>=</code>进行权限的设置</p>
</blockquote>
<p>例如，我们想要设置一个文件的权限为 -rwxr-xr-x 时，可以写成</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod u=rwx,go=rx fileName</div></pre></td></tr></table></figure>
<p>如果我们不清楚具体的权限，想要让所有人具有可读权限的时候，可以简单设置为</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod a+r fileName</div></pre></td></tr></table></figure>
<p>同样去掉可执行权限</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod a-x fileName</div></pre></td></tr></table></figure>
<p>当然了，<code>-</code> <code>+</code>也可以引用于单个用户</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod g+w fileName</div></pre></td></tr></table></figure>
<p>这样就为 group 用户增加来可写入的权限了．</p>
<hr>
<p>以上内容仅仅作为参考用，作者不保证绝对不出现差错，如果想知道更加具体的内容请查看官方的文档．</p>
]]></content>
      
        <categories>
            
            <category> -Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/10/28/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 源文件的编译命令（javac 命令）]]></title>
      <url>/2017/10/12/Java-javac-grammar/</url>
      <content type="html"><![CDATA[<p>一个编写好的Java源文件<code>.java</code>，要成功运行需要经历 <strong>编译</strong> 、<strong>加载</strong>、<strong>解释</strong> 、<strong>执行</strong> 四个步骤。Java编译程序将源文件编译成JVM可以执行的二进制字节码 <code>.class</code>。程序运行时，JVM将相应的字节码加载到内存中，Java 解释器将字节码翻译为机器代码执行。</p>
<a id="more"></a>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>Java程序运行的第一步是将Java源文件编译成字节码，即<code>.class</code>文件，C/C++编译器在编译源代码的时候，会根据所在平台的硬件信息，通过查表量所有对符号的引用转换为特定的内偏移量，从而保证了程序可以在平台上顺利运行。Java语言设计的初衷就是实现平台无关性（事实上并没有完全实现），做到这一点的一个重要的保证就是保证Java中所有引用信息不能够依赖于特定的硬件平台，因此，Java的编译器在编译时，不会直接将变量和方法的引用编译为数值引用，也不会确定在执行过程中具体的内存布局，而是将引用信息保存在字节码中，待程序在JVM中解释运行时，创建相应的布局，并且通过查表确定变量和方法所在的地址。换句话说就是<strong>字节码保留了做什么的信息，实际JVM来决定具体怎么做。</strong>从而实现了Java的可移植性。</p>
<h2 id="关于javac-exe"><a href="#关于javac-exe" class="headerlink" title="关于javac.exe"></a>关于javac.exe</h2><p>Java的编译程序javac.exe不是真正意义上的可执行程序，而是一个包装器，包含在jdk中，在jre环境下是没有的，它实际上是在运行下面的命令：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -classpath C:\Pragram Files\Java\JDK\lib\tools.jar com.sun.tools.javac.Main</div></pre></td></tr></table></figure>
<h2 id="Javac-命令的使用"><a href="#Javac-命令的使用" class="headerlink" title="Javac 命令的使用"></a>Javac 命令的使用</h2><p>执行Java编译工作的程序是Java编译器<code>javac.exe</code>，它在Java JDK的<code>bin</code>目录下，Windows下通过cmd执行其路径编译特定的Java文件。要特别注意 使用 javac 编译时提供的源代码名称必须含有<code>.java</code> 后缀。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c:\Pragram Files\Java\JDK\bin\javac Hello.java</div></pre></td></tr></table></figure>
<p>通过设置环境变量后，可以不用给出程序的具体的地址，直接调用<code>javac</code></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac Hello.java</div></pre></td></tr></table></figure>
<p>生成的字节码文件<code>.class</code>默认和源文件在同一个目录下，可以通过 <code>-d</code>命令指定字节存放的地址。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -d C:\javaProject\bin Hello.java</div></pre></td></tr></table></figure>
<p>生成的 <code>Hello.class</code>文件存放在<code>c:\javaProject\bin</code>目录下bin目录必须实际存在，否则将会报错。</p>
<p>javac 可以隐式的编译一些没有在命令行中提及的源文件（前提是它们都在同一个目录下）使用 <code>-verbos</code>选项跟踪自动编译。在编译源文件时，和源文件所有相关联的类，包括源文件中使用、扩展或者实现的每个类和接口，已及在源文件中没有明确出现，但是通过继承关系提供信息的类与接口的文件都要一并提供。</p>
<p>例如： 如果一个类 Lee 继承自 类 Person ，使用javac 编译时必须一起提供：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -d c:\bin Lee.java Person.java</div></pre></td></tr></table></figure>
<p>当然了，如果这两个文件在同一个目录下，编译Lee.java时就是隐式的自动加载 Person.java。如果不在同一个目录下，就需要指明详细的路径（不推荐，尽量将所有的源文件放在同一个项目文件下,如果关联对象过多，难以管理）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -d C:\bin Lee.java F:\src\Person.java</div></pre></td></tr></table></figure>
<p>可以同时编译多个<code>.java</code>文件，书写时用空格隔开。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac Test1.java Test2.java Test3.java</div></pre></td></tr></table></figure>
<p>为了缩短或者简化javac命令，可以指定一个或者多个每行含有一个文件名的文件。当javac遇到以<code>@</code>开头的参数时，它对那个文件中含有的文件名的操作和命令行的操作是一样的，有利于批量的编译大量文件。同时使得Windows命令行的长度不受限制。</p>
<p>例如，可以在名为sourcefiles的文本文件中列出所有源文件的名称。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hello1.java</div><div class="line">Hello2.java</div><div class="line">Hello3.java</div></pre></td></tr></table></figure>
<p>然后在命令行下运行编译器：(主要要带有相应的文件后缀名否则就会因为找不到文件报错。)</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac @sourcefiles.txt</div></pre></td></tr></table></figure>
<p>等价于：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac Hello1.java Hello2.java Hello3.java</div></pre></td></tr></table></figure>
<h2 id="详细命令"><a href="#详细命令" class="headerlink" title="详细命令"></a>详细命令</h2><p>Javac 的详细命令可以在命令行中输入<code>Javac</code>来查看。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac</div></pre></td></tr></table></figure>
<p>其标准的语法格式如下：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac [ options ] [sourcefiles][@files]</div></pre></td></tr></table></figure>
<ul>
<li>options: 命令行选项</li>
<li>sourcefiles : 一个或者多个要编译的源文件。例如 ：Hello.java</li>
<li>@files ：一个或者多个源文件的列表文件。如上文中的 <code>sourcefiles.txt</code></li>
</ul>
<h3 id="d-目录"><a href="#d-目录" class="headerlink" title="-d 目录"></a>-d 目录</h3><p>该选项用于生成class目标文件的目录，如果某个类是一个包的组成部分，则javac将会把该类放入反映包名的目录中，必要时创建目录，注意不要破坏class文件反映包名的目录结构，否则在运行时将会找不到文件。如果没有指定-d默认class文件被存放在和源文件相同的目录中。</p>
<p>例如； 如果一个类在包 ：<code>com.elemtype</code>下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.elemtype;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>命令行中输入：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -d C:\workspace\bin Hello.java</div></pre></td></tr></table></figure>
<p>编译后生成的class文件的存放路径将会是：<code>C:\worksapce\bin\com\elemtype\Hello.class</code></p>
<p>需要注意的是，-d 生成的目录并不会被自动的添加到用户类路径中。</p>
<p>JDK编译一个java源文件的时候，搜索类文件的方式和顺序如下：</p>
<ol>
<li><p><strong>Bootstrap classes</strong></p>
<p>Bootstrap默认的是JDK自带的jar或者zip文件，包括 jar\lib下的rt.jar等文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c:\Pragram files\Java\JDK\jre\lib\rt.jar</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Extension classes</strong></p>
<p>默认指的是 <code>jre\lib\ext\</code>下的文件，JDK在搜素完Bootstrap classes后搜索这些文件。</p>
</li>
<li><p><strong>User classes</strong></p>
<p>搜索顺序是当前的目录，环境变量CLASSPATH、-classpath.</p>
</li>
</ol>
<h3 id="classpath-cp"><a href="#classpath-cp" class="headerlink" title="-classpath    -cp"></a>-classpath    -cp</h3><p>-classpath 可以用来设置 User classes -classpath 的路径将会覆盖 CLASSPATH的设置。告知JDK搜索目录名，jar文档，zip文档。使用<code>;</code>进行分割。</p>
<p>例如：当你开发一个公共类并且包装成 一个 elemtype.jar 包，使用这个类的时候，使用 -classpath 告知 编译器 从 elemtype.jar中查找该类，否则将会报错。未找到该类。使用了 -classpath 后将不会再使用CLASSPATH中的类搜索路径，如果CLASSPATH未设置，默认使用 当前目录 <code>.</code>作为类搜索路径。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -classpath C:\lib\elemtype.jar -d classes src\*.java</div></pre></td></tr></table></figure>
<p><code>*.java</code>表示当前目录下的所有java文件。</p>
<p>使用 -classpath的缩写 <code>-cp</code>可以简化命令，上面的命令可以写成：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -cp c:\lib\elemtype.jar -d classes src\*.java</div></pre></td></tr></table></figure>
<p>推荐使用 -classpath 替代CLASSPATH的搜索路径，防止多个项目同时使用CLASSPATH发生潜在的冲突。</p>
<h3 id="sourcepath"><a href="#sourcepath" class="headerlink" title="-sourcepath"></a>-sourcepath</h3><p>编译时，源文件的路径可以用 <code>-sourcepath</code>来设定。具体使用方式和 -classpath 一样。默认情况下和-classpath的路径一样。编译过程中，需要源文件的话会首先在sourcefile 和 @sourcefile 指定的目录下寻找源文件，如果没有找到，会在 <code>-sourcepath</code>的路径下寻找。<code>-sourcepath</code>指定的文件可以是源文件的根目录，jar归档文件，或者是 zip归档文件。</p>
<p>实例：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -sourcepath src -d classes src\com\elemtype\Hello.java</div></pre></td></tr></table></figure>
<p>或者使用缩写<code>-sp</code>:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -sp src -d classes src\com\elemtype\Hello.java</div></pre></td></tr></table></figure>
<h3 id="source-和-target"><a href="#source-和-target" class="headerlink" title="source 和 target"></a>source 和 target</h3><p>如果你的电脑上安装了多个JDK,所以包含了多个版本的编译器，和多个版本的JVM.<code>-source</code>命令可以指定使用哪个编译器来进行编译。<code>-target</code>将指定生成和指定JVM兼容的class文件。</p>
<p>例如：想要用 JDK 1.6 版本的编辑器生成兼容 JVM 1.2 的class文件。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -cp lib\Util.zip -sp src -source <span class="number">1.6</span> -target <span class="number">1.2</span> -d classes Hello.java</div></pre></td></tr></table></figure>
<p>想要了解不同版本的特性，请查阅官方文档。</p>
<h2 id="文件目录的组织"><a href="#文件目录的组织" class="headerlink" title="文件目录的组织"></a>文件目录的组织</h2><p>推荐在项目文件夹下建立  src 目录存放源代码，最好创建反映包名的目录结构（需要手动创建目录），建立 bin 目录存放类文件，编译时会为class文件生成（反应包名的目录结构）。</p>
<p>例如 ：Practice项目中有源文件： com.elemtype.Hello.java com.elemtype.uitl.Test.java ,源代码文件目录： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">src </div><div class="line">com</div><div class="line">elemtype</div><div class="line">util  Hello.java</div><div class="line">Test.java</div></pre></td></tr></table></figure>
<p>类文件类似。</p>
<hr>
<p>更多细节请查看官方文档。</p>
<p>^_^</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -Javac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 相关语法]]></title>
      <url>/2017/10/12/markdown-notes-basic/</url>
      <content type="html"><![CDATA[<p>用Markdown 编写文章时，常用的一些语法。</p>
<a id="more"></a>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 支持两种标题的语法，Setext和类Atx格式。</p>
<ul>
<li>类SeText格式采用底线的的形式，采用 <code>=</code> <code>-</code>两种格式表示第一阶和第二阶标题。</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">最高阶标题</div><div class="line">=========</div><div class="line">第二阶标题</div><div class="line">---------</div></pre></td></tr></table></figure>
<ul>
<li>类Atx格式则是在首行添加<code>#</code>的格式，表示不同级别的标题大小，一共有6个级别，用一到六个<code>#</code>号表示，可以选择闭合的#在标题文本后面加任意数量的<code>#</code>号。注意<code>#</code>号和文件之间尽量留有一个空格。</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 标题一</span></div><div class="line"><span class="section">## 标题二</span></div><div class="line"><span class="section">### 标题三 #</span></div></pre></td></tr></table></figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用可以使用<code>&gt;</code>符号，可以引用单行，或者是一段的内容，当然了，<code>&gt;</code>也可以嵌套使用。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;单行文本</div><div class="line">&gt;一段文本。</div><div class="line"> 一段文本。</div><div class="line">&gt;&gt;嵌套使用</div></pre></td></tr></table></figure>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown支持有序列表和无序列表。</p>
<p>有序列表，<code>*</code> <code>-</code> <code>+</code>加空格加文本格式：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>第一列</div><div class="line"><span class="bullet">- </span>第二列</div><div class="line"><span class="bullet">+ </span>第三列</div></pre></td></tr></table></figure>
<p>无序列表，数字加英文点号加空格后面加文本：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>第一列</div><div class="line"><span class="bullet">2. </span>第二列</div><div class="line"><span class="bullet">3. </span>第三列</div></pre></td></tr></table></figure>
<p><em>需要注意的一点的是，由于数字加点加空格会被认为是一个列表，在上下文中尽量不要出现相同的格式，建议书写时在<code>.</code>前加转移符<code>\</code>.</em></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1\. 文本</div></pre></td></tr></table></figure>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>使用Markdown扩展的反引号标记来替代用缩进表示。如果标记一小块代码，使用<figure class="highlight plain"><figcaption><span>`` ` ``符号，使用多个`` ` ``标记，在反引号和文本之间最好加上空格。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```markdown</div><div class="line">` public static void main(String[] args)&#123;&#125; `</div><div class="line">`` ` ``</div></pre></td></tr></table></figure></p>
<p>大段的代码推荐使用三个反引号的栏式代码块，使代码高亮显示的同时，可以在第一行围栏中指定code的语言类型，可以对相应的关键词高亮显示。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">栏式代码块。</div><div class="line">​</div></pre></td></tr></table></figure>
<p>public static void main(String[] args){<br>  System.out.println(“Hello,workd!”);<br>}<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line"></div><div class="line">```markdown</div><div class="line">在第一行围栏中指定code语言类型</div><div class="line">​``` Java</div><div class="line">public static void main(String[] args)&#123;</div><div class="line">	System.out.println(&quot;Hello&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>高亮显示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	System.out.println(<span class="string">"Hello,world!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 链接的表示主要有两种格式，称为行内式和参照式。</p>
<p>行内式的格式为：<code>[name](link)</code>，如果想要给链接加上title，可以在链接后用双引号包住title的内容，写在链接的末尾。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="string">行内式</span>](<span class="link">http://example.example/"title"</span>)</div><div class="line">eg:</div><div class="line">[<span class="string">百度</span>](<span class="link">http://baidu.com/</span>)</div></pre></td></tr></table></figure>
<p>参考式的格式： <code>[name][id]</code>，并且在文件的任意地方对id进行定义：<code>[id]:http://...</code>。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">百度</span>][<span class="symbol">id</span>]</div><div class="line">[<span class="symbol">id</span>]: <span class="link">baidu://baidu.com/</span></div></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown中添加图片的方式和链接基本相同，唯一的区别在于要在图片链接的前面加<code>!</code>。</p>
<p>具体的格式为：<code>![name](link)</code>。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">图片1</span>](<span class="link">http://tupian...</span>)</div></pre></td></tr></table></figure>
<p>当然，也可以使用参照式，不作赘述。</p>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>在Markdown中使用<code>*</code>将文本包起来表示强调。单个<em>号表示斜体字，双</em>号表示加粗。注意*和要强调的文本之间不能够出现空格。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">*斜体*</span></div><div class="line"><span class="strong">**粗体**</span></div></pre></td></tr></table></figure>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>Markdown使用多个(三个及以上)<code>*</code> <code>-</code>或者<code>+</code>表示分隔线。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">***</span></div><div class="line">---</div><div class="line">+++</div></pre></td></tr></table></figure>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>Markdown的扩展中还提供了删除线的标记 <code>~</code>,使用两个<code>~</code>将文本内容包起来，可以添加删除线。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~~ 删除线 ~~</div></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown的扩展中支持表格的显示。具体格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|title1 |title2 | title3 |</div><div class="line">|-------|-------|--------|</div><div class="line">|1      |3      |2       |</div></pre></td></tr></table></figure>
<p>实际效果</p>
<table>
<thead>
<tr>
<th>title1</th>
<th>title2</th>
<th>title3</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>如果想要设置表格内容的对齐方式，可以在分割中添加<code>:</code></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">居中对齐 </div><div class="line">|:-----:|</div><div class="line">左对齐</div><div class="line">|:------|</div><div class="line">右对齐</div><div class="line">|------:|</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -markdown </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>Li Jian</p>
<p>大邪僧/日漫宅/</p>
<p>爱生活，爱动漫，爱game.</p>
<p>热爱和coding无关的所有事情。<br>性格怪异，行为疯癫。<br>不学无术，喜欢指手画脚。<br>年龄不小，本事不大。</p>
]]></content>
    </entry>
    
  
</search>
